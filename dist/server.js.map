{"version":3,"sources":["../server/server.js"],"names":["express","require","path","cookieParser","bodyParser","mongoose","users","trades","games","requests","connect","process","env","MONGOLAB_URI","Promise","global","session","MongoStore","db","connection","app","use","json","urlencoded","extended","static","secret","saveUninitialized","resave","cookie","maxAge","httpOnly","store","mongooseConnection","ttl","post","req","res","destroy","send","get","undefined","redirect","sendFile","resolve","__dirname","listen","PORT","console","log"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA;AACA,IAAME,eAAeF,QAAQ,eAAR,CAArB;AACA,IAAMG,aAAaH,QAAQ,aAAR,CAAnB;AACA,IAAMI,WAAWJ,QAAQ,UAAR,CAAjB;AACA,IAAMK,QAAQL,QAAQ,gBAAR,CAAd;AACA,IAAMM,SAASN,QAAQ,iBAAR,CAAf;AACA,IAAMO,QAAQP,QAAQ,gBAAR,CAAd;AACA,IAAMQ,WAAWR,QAAQ,mBAAR,CAAjB;;AAEA;AACAI,SAASK,OAAT,CAAiBC,QAAQC,GAAR,CAAYC,YAA7B;AACAR,SAASS,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA,IAAME,UAAUf,QAAQ,iBAAR,CAAhB;AACA,IAAMgB,aAAahB,QAAQ,eAAR,EAAyBe,OAAzB,CAAnB;;AAEA,IAAME,KAAKb,SAASc,UAApB;;AAEA,IAAMC,MAAMpB,SAAZ;;AAEA;AACAoB,IAAIC,GAAJ,CAAQjB,WAAWkB,IAAX,EAAR;AACAF,IAAIC,GAAJ,CAAQjB,WAAWmB,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;AACAJ,IAAIC,GAAJ,CAAQlB,cAAR;AACAiB,IAAIC,GAAJ,CAAQrB,QAAQyB,MAAR,CAAe,QAAf,CAAR;;AAEAL,IAAIC,GAAJ,CAAQL,QAAQ;AACdU,UAAQ,SADM;AAEdC,qBAAmB,IAFL;AAGdC,UAAQ,IAHM;AAIdC,UAAQ,EAACC,QAAQ,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,CAA/B,EAAkCC,UAAU,KAA5C,EAJM,EAI8C;AAC5DC,SAAO,IAAIf,UAAJ,CAAe,EAACgB,oBAAoBf,EAArB,EAAyBgB,KAAK,IAAI,EAAJ,GAAS,EAAT,GAAc,EAA5C,EAAf;AALO,CAAR,CAAR;;AAQAd,IAAIC,GAAJ,CAAQ,QAAR,EAAkBf,KAAlB;AACAc,IAAIC,GAAJ,CAAQ,QAAR,EAAkBb,KAAlB;AACAY,IAAIC,GAAJ,CAAQ,SAAR,EAAmBd,MAAnB;AACAa,IAAIC,GAAJ,CAAQ,WAAR,EAAqBZ,QAArB;;AAEAW,IAAIe,IAAJ,CAAS,aAAT,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpCD,MAAIpB,OAAJ,CAAYsB,OAAZ,CAAoB,YAAM;AACxB;AACA,WAAOD,IAAIE,IAAJ,CAAS,eAAT,CAAP;AACD,GAHD;;AAMA;AACA;;;;AAID,CAZD;;AAcAnB,IAAIoB,GAAJ,CAAQ,GAAR,EAAa,UAACJ,GAAD,EAAMC,GAAN,EAAc;AACzB;AACA;AACA,MAAIA,IAAIrB,OAAJ,KAAgByB,SAApB,EAA+B;AAC7B,WAAOJ,IAAIK,QAAJ,CAAa,GAAb,CAAP;AACD;;AAEDL,MAAIM,QAAJ,CAAazC,KAAK0C,OAAL,CAAaC,SAAb,EAAwB,WAAxB,EAAqC,YAArC,CAAb;AACD,CARD;;AAUAzB,IAAI0B,MAAJ,CAAWnC,QAAQC,GAAR,CAAYmC,IAAZ,IAAoB,IAA/B,EAAqC,YAAM;AACzCC,UAAQC,GAAR,CAAY,mBAAZ;AACD,CAFD","file":"server.js","sourcesContent":["const express = require('express');\nconst path = require('path');\n// const logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst users = require('./routes/users');\nconst trades = require('./routes/trades');\nconst games = require('./routes/games');\nconst requests = require('./routes/requests');\n\n// mongoose.connect('mongodb://localhost/local');\nmongoose.connect(process.env.MONGOLAB_URI);\nmongoose.Promise = global.Promise;\n\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\n\nconst db = mongoose.connection;\n\nconst app = express();\n\n// app.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\napp.use(cookieParser());\napp.use(express.static('static'));\n\napp.use(session({\n  secret: 'noodles',\n  saveUninitialized: true,\n  resave: true,\n  cookie: {maxAge: 1000 * 60 * 60 * 24 * 2, httpOnly: false}, // 2 days\n  store: new MongoStore({mongooseConnection: db, ttl: 2 * 24 * 60 * 60})\n}));\n\napp.use('/users', users);\napp.use('/games', games);\napp.use('/trades', trades);\napp.use('/requests', requests);\n\napp.post('/logoutUser', (req, res) => {\n  req.session.destroy(() => {\n    // setTimeout(5, () => db.close());\n    return res.send('session ended');\n  });\n\n\n  //db.close();\n  /*\n  mongoose.connection.disconnect(function () {\n    console.log('Mongoose connection disconnected');\n  });*/\n});\n\napp.get('*', (req, res) => {\n  // makes sure user is logged into before directing\n  // to dashboard\n  if (res.session === undefined) {\n    return res.redirect('/');\n  }\n\n  res.sendFile(path.resolve(__dirname, '../static', 'index.html'));\n});\n\napp.listen(process.env.PORT || 3000, () => {\n  console.log('App started again');\n});\n"]}