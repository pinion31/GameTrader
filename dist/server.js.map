{"version":3,"sources":["../server/server.js"],"names":["express","require","path","logger","cookieParser","bodyParser","app","client","process","env","IGDB_KEY","use","json","urlencoded","extended","static","get","req","res","searchResults","games","fields","search","params","term","filters","limit","offset","then","response","result","body","forEach","game","cover","coverImage","image","cloudinary_id","concat","id","name","summary","JSON","stringify","catch","error","sendFile","resolve","__dirname","listen","console","log"],"mappings":";;AAKA;;;;;;AALA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,eAAeH,QAAQ,eAAR,CAArB;AACA,IAAMI,aAAaJ,QAAQ,aAAR,CAAnB;;;AAGA,IAAMK,MAAMN,SAAZ;;AAGA,IAAMO,SAAS,2BAAKC,QAAQC,GAAR,CAAYC,QAAjB,CAAf;AACA;AACA;AACAJ,IAAIK,GAAJ,CAAQR,OAAO,KAAP,CAAR;AACAG,IAAIK,GAAJ,CAAQN,WAAWO,IAAX,EAAR;AACAN,IAAIK,GAAJ,CAAQN,WAAWQ,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAR,IAAIK,GAAJ,CAAQP,cAAR;AACA;AACAE,IAAIK,GAAJ,CAAQX,QAAQe,MAAR,CAAe,QAAf,CAAR;;AAEAT,IAAIU,GAAJ,CAAQ,iBAAR,EAA2B,UAACC,GAAD,EAAKC,GAAL,EAAa;;AAEtC,MAAIC,gBAAgB,EAApB;;AAEA;;;;;;;;;;;AAaAZ,SAAOa,KAAP,CAAa;AACXC,YAAQ,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,EAAwB,SAAxB,EAAmC,YAAnC,EAAiD,YAAjD,CADG,EAC8D;AACzEC,YAAQL,IAAIM,MAAJ,CAAWC,IAFR;AAGXC,aAAS;AACP,mCAA4B;AADrB,KAHE;AAMXC,WAAO,EANI,EAMA;AACXC,YAAQ,CAPG,CAOD;AAPC,GAAb,EAQKC,IARL,CAQU,UAACC,QAAD,EAAc;AACpB,QAAIC,SAASD,SAASE,IAAtB;;AAECD,WAAOE,OAAP,CAAe,gBAAQ;AACpB,UAAIC,KAAKC,KAAT,EAAgB;;AAEd,YAAIC,aAAa5B,OAAO6B,KAAP,CAAa;AAC5BC,yBAAeJ,KAAKC,KAAL,CAAWG,aADE,EAAb,EAEf,aAFe,EAGf,KAHe,CAAjB;;AAMAlB,wBAAgBA,cAAcmB,MAAd,CAAqB,CACrC;AACEC,cAAIN,KAAKM,EADX;AAEEC,gBAAKP,KAAKO,IAFZ;AAGEC,mBAAQR,KAAKQ,OAHf;AAIEP,iBAAMC;AACN;AACA;AANF,SADqC,CAArB,CAAhB;AASD;AACJ,KAnBA;AAoBAjB,QAAIN,IAAJ,CAAS8B,KAAKC,SAAL,CAAexB,aAAf,CAAT;AACN,GAhCC,EAgCCyB,KAhCD,CAgCO,iBAAS;AACV,UAAMC,KAAN;AACP,GAlCC;AAmCD,CApDD;;AAsDAvC,IAAIU,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAI4B,QAAJ,CAAa5C,KAAK6C,OAAL,CAAaC,SAAb,EAAwB,WAAxB,EAAqC,YAArC,CAAb;AACD,CAFD;;AAIA1C,IAAI2C,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrBC,UAAQC,GAAR,CAAY,mBAAZ;AACD,CAFD","file":"server.js","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nimport igdb from 'igdb-api-node';\n\nconst app = express();\n\n\nconst client = igdb(process.env.IGDB_KEY);\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n//app.use(express.static(path.join(__dirname, '../static')));\napp.use(express.static('static'));\n\napp.get('/findGame/:term', (req,res) => {\n\n  let searchResults = [];\n\n  /*\n  client.platforms({\n    fields: '*' , // Return all fields\n   // search: req.params.term,\n    limit: 50, // Limit to 5 results\n    offset: 100 // Index offset for results\n    }).then((response) => {\n        console.dir(response);\n\n\n\n     });*/\n\n  client.games({\n    fields: ['id', 'name', 'cover', 'summary', 'developers', 'publishers'] , // Return all fields\n    search: req.params.term,\n    filters: {\n      'release_dates.platform-eq':49\n    },\n    limit: 15, // Limit to 5 results\n    offset: 0 // Index offset for results\n    }).then((response) => {\n      let result = response.body;\n\n       result.forEach(game => {\n          if (game.cover) {\n\n            let coverImage = client.image({\n              cloudinary_id: game.cover.cloudinary_id},\n              'cover_small',\n              'jpg'\n            );\n\n            searchResults = searchResults.concat([\n            {\n              id: game.id,\n              name:game.name,\n              summary:game.summary,\n              cover:coverImage,\n              //developer: result.developer,\n              //publisher: result.publishers,\n            }]);\n          }\n      });\n       res.json(JSON.stringify(searchResults));\n}).catch(error => {\n        throw error;\n});\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve(__dirname, '../static', 'index.html'));\n});\n\napp.listen(3000, () => {\n  console.log('App started again');\n});\n\n\n"]}