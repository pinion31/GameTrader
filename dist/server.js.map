{"version":3,"sources":["../server/server.js"],"names":["express","require","path","logger","cookieParser","bodyParser","mongoose","connect","Promise","global","app","client","process","env","IGDB_KEY","use","json","urlencoded","extended","static","get","req","res","searchResults","games","fields","search","params","game","filters","console","limit","offset","then","response","result","body","forEach","cover","coverImage","image","cloudinary_id","concat","id","name","summary","gameConsole","JSON","stringify","catch","error","post","user","username","password","email","city","state","requests","save","err","findOne","lean","modifiedUser","Object","assign","newGameColl","Array","from","findOneAndUpdate","sendFile","resolve","__dirname","listen","log"],"mappings":"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","file":"server.js","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/local');\nmongoose.Promise = global.Promise;\nimport igdb from 'igdb-api-node';\nimport User from './models/User';\n\n\n/*\nvar test = new User({\n  'test': {\n     username: 'chriscantu',\n      password: 'moondog1',\n      email: 'pinion31@gmail.com',\n      city: 'Manor',\n      state: 'TX',\n      requests: {},\n      games: {\n        1234:\n          {\n            name: 'Fallout 4',\n            id: 1234,\n            cover: '',\n            owner: 'chriscantu',\n            gameconsole: 'xbox',\n            summary: '',\n          },\n      }\n  }\n\n});\n\ntest.save(err) => {\n  if (err) {throw err}\n  else {\n    console.log('test saved');\n  }\n});*/\n\nconst app = express();\n\n\nconst client = igdb(process.env.IGDB_KEY);\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n//app.use(express.static(path.join(__dirname, '../static')));\napp.use(express.static('static'));\n\napp.get('/findGame/:console/:game', (req,res) => {\n  let searchResults = [];\n\n  client.games({\n    fields: ['id', 'name', 'cover', 'summary', 'developers', 'publishers'] , // Return all fields\n    search: req.params.game,\n    filters: {\n      'release_dates.platform-eq': req.params.console,\n    },\n    limit: 15, // Limit to 5 results\n    offset: 0 // Index offset for results\n  }).then((response) => {\n    const result = response.body;\n\n    result.forEach((game) => {\n      if (game.cover) {\n        let coverImage = client.image({\n          cloudinary_id: game.cover.cloudinary_id},\n          'cover_small',\n          'jpg'\n        );\n\n        searchResults = searchResults.concat([\n          {\n            id: game.id,\n            name: game.name,\n            summary: game.summary,\n            cover: coverImage,\n            gameConsole: req.params.console,\n            // developer: result.developer,\n            // publisher: result.publishers,\n          }]);\n      }\n    });\n\n    res.json(JSON.stringify(searchResults));\n  }).catch((error) => {\n    throw error;\n});\n});\n\napp.post('/addUser', (req,res) => {\n  const user = new User(\n    {\n      username: req.body.username,\n      password: req.body.password,\n      email: req.body.email,\n      city: req.body.city,\n      state: req.body.state,\n      requests: {},\n      games: {}\n    }\n  );\n\n  user.save((err) => {\n    if (err) {throw err};\n  });\n});\n\napp.get('/getUserGames/:user', (req,res) => {\n  User.findOne({username:`${req.params.user}`}).lean()\n    .then(user => {\n      res.json(user.games);\n    });\n});\n\napp.post('/addGame', (req, res) => {\n\n  User.findOne({username: 'chris'}).lean()\n    .then((user) => {\n      const modifiedUser = Object.assign({}, user);\n\n      const newGameColl = modifiedUser.games === null?Array.from(req.body):\n        Array.from(modifiedUser.games).concat(req.body);\n\n      User.findOneAndUpdate({username: 'chris'}, {games: newGameColl})\n        .then((response) => {\n          res.json(req.body);\n        });\n    });\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve(__dirname, '../static', 'index.html'));\n});\n\napp.listen(3000, () => {\n  console.log('App started again');\n});\n\n\n /*\n  client.platforms({\n    fields: '*' , // Return all fields\n   // search: req.params.game,\n    limit: 50, // Limit to 5 results\n    offset: 100 // Index offset for results\n    }).then((response) => {\n        console.dir(response);\n\n\n\n     });*/"]}