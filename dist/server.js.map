{"version":3,"sources":["../server/server.js"],"names":["express","require","path","logger","cookieParser","bodyParser","mongoose","connect","Promise","global","session","MongoStore","db","connection","app","client","process","env","IGDB_KEY","use","json","urlencoded","extended","static","secret","saveUninitialized","resave","cookie","maxAge","httpOnly","store","mongooseConnection","ttl","post","req","res","user","body","username","console","log","save","err","redirect","dir","password","email","city","state","requests","games","get","searchResults","fields","search","params","game","filters","limit","offset","then","response","result","forEach","cover","coverImage","image","cloudinary_id","concat","id","name","summary","gameConsole","JSON","stringify","catch","error","allGames","find","lean","users","findOne","modifiedUser","Object","assign","newGameColl","Array","from","findOneAndUpdate","filter","retrievedUser","userRequests","request","requestedGame","requestedGameId","offeredGame","offeredGameId","sendFile","resolve","__dirname","listen"],"mappings":"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","file":"server.js","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/local');\nmongoose.Promise = global.Promise;\n\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\n\nconst db = mongoose.connection;\nimport igdb from 'igdb-api-node';\nimport User from './models/User';\n\nconst app = express();\n\n\nconst client = igdb(process.env.IGDB_KEY);\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\n//app.use(express.static(path.join(__dirname, '../static')));\napp.use(express.static('static'));\n\napp.use(session({\n  secret: 'noodles',\n  saveUninitialized: true,\n  resave: true,\n  cookie: {maxAge: 1000 * 60 * 60 * 24 * 2, httpOnly: false}, // 2 days\n  store: new MongoStore({mongooseConnection: db, ttl: 2 * 24 * 60 * 60})\n}));\n\n//**** USER ACTIONS ***///\napp.post('/loginUser', (req, res) => {\n  if (typeof req.session.user === 'undefined') {\n    req.session.user = req.body.username;\n    console.log('resaving session');\n    req.session.save((err) => {\n\n      if(err){\n        console.log('error with session');\n      }\n      else {\n        res.json({redirect: '/'});\n      }\n\n    });\n  }\n  else if (req.session.user != req.body.username) {\n      req.session.user = req.body.username;\n      req.session.save((err) => {\n          if(err){\n            console.log('error with session');\n          }\n          else {\n            res.json({redirect: '/'});\n          }\n        });\n    /*req.session.destroy((err) => {\n      if (err) {throw err};\n\n        req.session.user = req.body.username;\n        console.log('resaving session with new user');\n        req.session.save((err) => {\n          if(err){\n            console.log('error with session');\n          }\n          else {\n            res.json({redirect: '/'});\n          }\n        });\n\n    });*/\n  } else {\n    res.json({redirect: '/'});\n  }\n\n\n\n  console.dir(req.session);\n\n  //console.log('redirecting...');\n  //res.json({redirect: '/'});\n  //res.redirect('/');\n\n\n  /*req.session.user = req.body.username;\n  req.session.save((err) => {\n    if(err){\n      console.log('error with session');\n    }\n  });*/\n  //res.json(req.session);\n});\n\napp.post('/addUser', (req, res) => {\n  const user = new User(\n    {\n      username: req.body.username,\n      password: req.body.password,\n      email: req.body.email,\n      city: req.body.city,\n      state: req.body.state,\n      requests: null,\n      games: null\n    }\n  );\n\n  user.save((err) => {\n    if (err) {throw err};\n  });\n});\n\n//** GAME ACTIONS ***//\n\napp.get('/findGame/:console/:game', (req,res) => {\n  let searchResults = [];\n\n  client.games({\n    fields: ['id', 'name', 'cover', 'summary', 'developers', 'publishers'] , // Return all fields\n    search: req.params.game,\n    filters: {\n      'release_dates.platform-eq': req.params.console,\n    },\n    limit: 15, // Limit to 5 results\n    offset: 0 // Index offset for results\n  }).then((response) => {\n    const result = response.body;\n\n    result.forEach((game) => {\n      if (game.cover) {\n        let coverImage = client.image({\n          cloudinary_id: game.cover.cloudinary_id},\n          'cover_small',\n          'jpg'\n        );\n\n        searchResults = searchResults.concat([\n          {\n            id: game.id,\n            name: game.name,\n            summary: game.summary,\n            cover: coverImage,\n            gameConsole: req.params.console,\n            // developer: result.developer,\n            // publisher: result.publishers,\n          }]);\n      }\n    });\n\n    res.json(JSON.stringify(searchResults));\n  }).catch((error) => {\n    throw error;\n});\n});\n\napp.get('/getAllGames', (req,res) => {\n  let allGames = [];\n\n  User.find({}).lean()\n    .then((users) => {\n      users.forEach((user) => {\n        if (user.games) {\n          allGames = allGames.concat(user.games);\n        }\n      });\n\n      res.json(allGames);\n\n    }).catch((err) => {\n      throw err;\n    });\n\n});\n\napp.get('/getUserGames/:user', (req, res) => {\n  User.findOne({username: req.session.user}).lean()\n    .then((user) => {\n      if (user.games) {\n        res.json(user.games);\n      } else {\n        res.json([]);\n      }\n    });\n});\n\napp.post('/addGame/:user', (req, res) => {\n  User.findOne({username: req.session.user}).lean()\n    .then((user) => {\n      const modifiedUser = Object.assign({}, user);\n      const newGameColl = modifiedUser.games === null?Array.from(req.body):\n        Array.from(modifiedUser.games).concat(req.body);\n\n      User.findOneAndUpdate({username: req.session.user}, {games: newGameColl})\n        .then(() => {\n          res.json(req.body);\n        });\n    });\n});\n\napp.post('/removeGame/:user', (req, res) => {\n  User.findOne({username: req.session.user}).lean()\n    .then((user) => {\n      const modifiedUser = Object.assign({}, user);\n\n      const newGameColl = Array.from(modifiedUser.games).filter((game) => {\n        if (req.body.id != game.id) {\n          return game;\n        }\n      });\n\n      User.findOneAndUpdate({username: req.session.user}, {games: newGameColl})\n        .then(() => {\n          res.json(newGameColl);\n        });\n    });\n});\n\n//**** REQUEST ACTIONS *****/////\n\napp.post('/addRequest/:user', (req, res) => {\n  User.findOne({username: req.session.user}).lean()\n    .then((user) => {\n      const retrievedUser = Object.assign({}, user);\n      const userRequests = retrievedUser.requests === null?Array.from(req.body):\n        Array.from(retrievedUser.requests).concat(req.body);\n\n      User.findOneAndUpdate({username: req.session.user}, {requests: userRequests})\n        .then(() => {\n          res.json(req.body);\n        });\n    });\n});\n\napp.post('/removeRequest/:user', (req, res) => {\n  User.findOne({username: req.session.user}).lean()\n    .then((user) => {\n      const retrievedUser = Object.assign({}, user);\n      console.dir(req.body);\n      let userRequests = user.requests.filter((request) => {\n          console.dir(request);\n        if (request.requestedGame.id != req.body.requestedGameId &&\n            request.offeredGame.id != req.body.offeredGameId) {\n          return request;\n        }\n      });\n\n      User.findOneAndUpdate({username: req.session.user}, {requests: userRequests})\n        .then(() => {\n          res.json(userRequests);\n        });\n    });\n});\n\napp.get('/getUserRequests/:user', (req, res) => {\n  User.findOne({username: req.session.user}).lean()\n    .then((user) => {\n      if (user.requests) {\n        res.json(user.requests);\n      } else {\n        res.json([]);\n      }\n    });\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve(__dirname, '../static', 'index.html'));\n});\n\napp.listen(3000, () => {\n  console.log('App started again');\n});\n\n\n /*\n  client.platforms({\n    fields: '*' , // Return all fields\n   // search: req.params.game,\n    limit: 50, // Limit to 5 results\n    offset: 100 // Index offset for results\n    }).then((response) => {\n        console.dir(response);\n\n\n\n     });*/"]}