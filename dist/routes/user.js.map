{"version":3,"sources":["../../server/routes/user.js"],"names":["app","post","req","res","usernameStripped","body","username","split","User","findOne","then","user","bcrypt","compare","password","err","match","session","save","json","redirect","validation","field","result","genSalt","salt","hash","password1","console","log","email","city","state","requests","games"],"mappings":"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","file":"user.js","sourcesContent":["app.post('/loginUser', (req, res) => {\r\n  // strips out trailing spaces after username\r\n  const usernameStripped = req.body.username.split(' ')[0];\r\n\r\n  User.findOne({username: usernameStripped})\r\n    .then((user) => {\r\n      if (user) {\r\n        // decrypt password\r\n        bcrypt.compare(req.body.password, user.password, (err, match) => {\r\n          if (match) {\r\n            // session check\r\n            if (typeof req.session.user === 'undefined') {\r\n              req.session.user = usernameStripped;\r\n              req.session.save((err) => {\r\n                if (err) {\r\n                  throw err;\r\n                } else {\r\n                  res.json({\r\n                    redirect: '/Dashboard',\r\n                    validation: 'valid',\r\n                  });\r\n                }\r\n              });\r\n            } else if (req.session.user != usernameStripped) {\r\n              req.session.user = usernameStripped;\r\n              req.session.save((err) => {\r\n                if (err) {\r\n                  throw err;\r\n                } else {\r\n                  res.json({\r\n                    redirect: '/Dashboard',\r\n                    validation: 'valid',\r\n                  });\r\n                }\r\n              });\r\n            } else {\r\n              res.json({\r\n                redirect: '/Dashboard',\r\n                validation: 'valid',\r\n              });\r\n            }\r\n          } else {\r\n            res.json({\r\n              field: 'passwordHelp',\r\n              validation: 'Invalid Password',\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        res.json({\r\n          field: 'usernameHelp',\r\n          validation: 'Invalid Username',\r\n        });\r\n      }\r\n    });\r\n});\r\n\r\napp.post('/addUser', (req, res) => {\r\n  // strips out trailing spaces after username\r\n  const usernameStripped = req.body.username.split(' ')[0];\r\n\r\n  User.findOne({username: usernameStripped})\r\n    .then((result) => {\r\n      if (!result) {\r\n        req.session.user = usernameStripped;\r\n        req.session.save((err) => {\r\n          if (err) { throw err; }\r\n        });\r\n\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          bcrypt.hash(req.body.password1, salt, (err, hash) => {\r\n            // Store hash in your password DB.\r\n            console.log('hash is ' + hash);\r\n            const user = new User(\r\n              {\r\n                username: usernameStripped,\r\n                password: hash,\r\n                email: req.body.email,\r\n                city: req.body.city,\r\n                state: req.body.state,\r\n                requests: null,\r\n                games: null\r\n              }\r\n            );\r\n\r\n            user.save((err) => {\r\n              if (err) { throw err; }\r\n            });\r\n\r\n            res.json({\r\n              validation: 'valid',\r\n              redirect: '/Dashboard'\r\n            });\r\n          });\r\n        });\r\n      } else {\r\n        res.json({validation: 'User already exists.'});\r\n      }\r\n    });\r\n});"]}