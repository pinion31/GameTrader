{"version":3,"sources":["../../server/routes/trades.js"],"names":["express","require","router","Router","User","post","req","res","traderGameToReceive","Object","assign","body","offeredGame","tradeeGameToReceive","requestedGame","findOne","username","session","user","lean","then","userRequests","requests","filter","request","id","findOneAndUpdate","owner","ownerRequests","Array","from","map","status","type","json","gameTradee","gameTrader","trader","traderGames","games","traderRequests","game","concat","tradee","tradeeGames","module","exports"],"mappings":"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","file":"trades.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst User = require('../models/user');\r\n\r\nrouter.post('/declineTrade', (req, res) => {\r\n  const traderGameToReceive = Object.assign({}, req.body.offeredGame); // from tradee to trader\r\n  const tradeeGameToReceive = Object.assign({}, req.body.requestedGame); // from trader to tradee\r\n\r\n  User.findOne({username: req.session.user}).lean()\r\n    .then((user) => {\r\n      const userRequests = user.requests.filter((request) => {\r\n        if (request.requestedGame.id != req.body.requestedGame.id &&\r\n            request.offeredGame.id != req.body.offeredGame.id) {\r\n          return request;\r\n        }\r\n      });\r\n\r\n      User.findOneAndUpdate({username: req.session.user}, {requests: userRequests})\r\n        .then(() => {\r\n          User.findOne({username: req.body.requestedGame.owner}).lean()\r\n            .then((owner) => {\r\n              const ownerRequests = Array.from(owner.requests);\r\n              ownerRequests.map((request) => {\r\n                if (request.requestedGame.id === traderGameToReceive.id &&\r\n                  request.offeredGame.id === tradeeGameToReceive.id) {\r\n                  request.status = req.body.type;\r\n                }\r\n              });\r\n\r\n              User.findOneAndUpdate(\r\n                {username: req.body.requestedGame.owner},\r\n                {requests: ownerRequests})\r\n                .then(() => {\r\n                  res.json(userRequests);\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n\r\n// complete trade for trader after tradee accepts trade\r\nrouter.post('/completeTrade', (req, res) => {\r\n  const traderGameToReceive = Object.assign({}, req.body.offeredGame); // from tradee to trader\r\n  const tradeeGameToReceive = Object.assign({}, req.body.requestedGame); // from trader to tradee\r\n  const gameTradee = req.session.user;\r\n  const gameTrader = req.body.requestedGame.owner;\r\n\r\n  // perform exchange on trader library\r\n  User.findOne({username: gameTrader}).lean()\r\n    .then((trader) => {\r\n      let traderGames = Array.from(trader.games);\r\n      const traderRequests = Array.from(trader.requests);\r\n\r\n      // remove game from trader's library\r\n      traderGames = traderGames.filter((game) => {\r\n        if (game.id != tradeeGameToReceive.id) {\r\n          return game;\r\n        }\r\n      });\r\n\r\n      // change status for request to accept\r\n      traderRequests.map((request) => {\r\n        if (request.requestedGame.id === traderGameToReceive.id &&\r\n            request.offeredGame.id === tradeeGameToReceive.id) {\r\n          request.status = 'Accepted';\r\n        }\r\n      });\r\n\r\n      // change owner of game to new owner\r\n      traderGameToReceive.owner = gameTrader;\r\n\r\n      // add game to trader's library\r\n      traderGames = traderGames.concat([traderGameToReceive]);\r\n\r\n      User.findOneAndUpdate({username: gameTrader}, {games: traderGames, requests: traderRequests})\r\n        .then(() => {\r\n          // perform exchange on tradee library\r\n          User.findOne({username: gameTradee}).lean()\r\n            .then((tradee) => {\r\n              let tradeeGames = Array.from(tradee.games);\r\n              // remove game from tradee's library\r\n              tradeeGames = tradeeGames.filter((game) => {\r\n                if (game.id != traderGameToReceive.id) {\r\n                  return game;\r\n                }\r\n              });\r\n\r\n              // change owner of game to new owner\r\n              tradeeGameToReceive.owner = gameTradee;\r\n\r\n              // add game to tradee's library\r\n              tradeeGames = tradeeGames.concat([tradeeGameToReceive]);\r\n\r\n              User.findOneAndUpdate({username: gameTradee}, {games: tradeeGames})\r\n                .then(() => {\r\n                  res.json(tradeeGames);\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}