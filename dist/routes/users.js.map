{"version":3,"sources":["../../server/routes/users.js"],"names":["express","require","router","Router","User","bcrypt","post","req","res","usernameStripped","body","username","split","findOne","then","user","compare","password","err","match","session","save","json","redirect","validation","field","result","genSalt","salt","hash","password1","email","city","state","requests","games","destroy","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["'use strict';\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst User = require('../models/user');\r\nconst bcrypt = require('bcryptjs');\r\n\r\n/**\r\n * logs in User\r\n * input: {user: {username: String, password: String}}\r\n * output: { redirect: String, field: String, validation: String,}\r\n *  if successful auth, user is sent to route contained in redirect String. Otherwise, error type sent back in field String\r\n *  validation String indicates where auth was successful or sends back error message type\r\n */\r\nrouter.post('/loginUser', (req, res) => {\r\n  // strips out trailing spaces after username\r\n  const usernameStripped = req.body.username.split(' ')[0];\r\n\r\n  User.findOne({username: usernameStripped})\r\n    .then((user) => {\r\n      if (user) {\r\n        // decrypt password\r\n        bcrypt.compare(req.body.password, user.password, (err, match) => {\r\n          if (match) {\r\n            // session check\r\n            if (typeof req.session.user === 'undefined') {\r\n              req.session.user = usernameStripped;\r\n              req.session.save((err) => {\r\n                if (err) {\r\n                  throw err;\r\n                } else {\r\n                  res.json({\r\n                    redirect: '/Dashboard',\r\n                    validation: 'valid',\r\n                  });\r\n                }\r\n              });\r\n            } else if (req.session.user != usernameStripped) {\r\n              req.session.user = usernameStripped;\r\n              req.session.save((err) => {\r\n                if (err) {\r\n                  throw err;\r\n                } else {\r\n                  res.json({\r\n                    redirect: '/Dashboard',\r\n                    validation: 'valid',\r\n                  });\r\n                }\r\n              });\r\n            } else {\r\n              res.json({\r\n                redirect: '/Dashboard',\r\n                validation: 'valid',\r\n              });\r\n            }\r\n          } else {\r\n            res.json({\r\n              field: 'passwordHelp',\r\n              validation: 'Invalid Password',\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        res.json({\r\n          field: 'usernameHelp',\r\n          validation: 'Invalid Username',\r\n        });\r\n      }\r\n    });\r\n});\r\n\r\n/**\r\n * Adds new User to db\r\n * input:{\r\n    newUser: {\r\n      username: String,\r\n      password1: String,\r\n      password2: String,\r\n      email: String,\r\n      city: String,\r\n      state: String,\r\n    }\r\n  }\r\n * output: {\r\n    redirect: String (route to redirect to if adding user is successful),\r\n    validation: String (indicates if user add is successful)\r\n    }\r\n */\r\nrouter.post('/addUser', (req, res) => {\r\n  // strips out trailing spaces after username\r\n  const usernameStripped = req.body.username.split(' ')[0];\r\n\r\n  User.findOne({username: usernameStripped})\r\n    .then((result) => {\r\n      if (!result) {\r\n        req.session.user = usernameStripped;\r\n        req.session.save((err) => {\r\n          if (err) { throw err; }\r\n        });\r\n\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          bcrypt.hash(req.body.password1, salt, (err, hash) => {\r\n            // Store hash in your password DB.\r\n            const user = new User(\r\n              {\r\n                username: usernameStripped,\r\n                password: hash,\r\n                email: req.body.email,\r\n                city: req.body.city,\r\n                state: req.body.state,\r\n                requests: [],\r\n                games: []\r\n              }\r\n            );\r\n\r\n            user.save((err) => {\r\n              if (err) { throw err; }\r\n            });\r\n\r\n            res.json({\r\n              validation: 'valid',\r\n              redirect: '/Dashboard'\r\n            });\r\n          });\r\n        });\r\n      } else {\r\n        res.json({validation: 'User already exists.'});\r\n      }\r\n    });\r\n});\r\n\r\n/**\r\n * logs out user and destroys current session\r\n */\r\nrouter.post('/logoutUser', (req) => {\r\n  req.session.destroy();\r\n});\r\n\r\nmodule.exports = router;\r\n"]}