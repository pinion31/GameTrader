{"version":3,"sources":["../../server/routes/games.js"],"names":["express","require","router","Router","User","client","process","env","IGDB_KEY","get","req","res","searchResults","games","fields","search","params","game","filters","console","limit","offset","then","response","result","body","forEach","cover","coverImage","image","cloudinary_id","screenShots","screenshots","map","screenshot","screenShotURL","push","concat","id","name","summary","gameConsole","json","JSON","stringify","catch","error","allGames","find","lean","users","user","owner","session","err","findOne","username","post","modifiedUser","Object","assign","gametoAdd","Array","from","newGameColl","findOneAndUpdate","filter","module","exports"],"mappings":"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","file":"games.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst User = require('../models/User');\r\nimport igdb from 'igdb-api-node';\r\nconst client = igdb(process.env.IGDB_KEY);\r\n\r\nrouter.get('/findGame/:console/:game', (req, res) => {\r\n  let searchResults = [];\r\n\r\n  client.games({\r\n    fields: ['id', 'name', 'cover', 'summary', 'developers', 'screenshots'],\r\n    // fields: '*',\r\n    search: req.params.game,\r\n    filters: {\r\n      'release_dates.platform-eq': req.params.console,\r\n    },\r\n    limit: 15, // Limit to 5 results\r\n    offset: 0 // Index offset for results\r\n  }).then((response) => {\r\n    const result = response.body;\r\n\r\n    result.forEach((game) => {\r\n      if (game.cover) {\r\n        const coverImage = client.image({\r\n          cloudinary_id: game.cover.cloudinary_id},\r\n        'cover_small',\r\n        'jpg'\r\n        );\r\n\r\n        // convert and add screenshots\r\n        const screenShots = [];\r\n\r\n        if (game.screenshots) {\r\n          game.screenshots.map((screenshot) => {\r\n            const screenShotURL = client.image({\r\n              cloudinary_id: screenshot.cloudinary_id},\r\n            'screenshot_med',\r\n            'jpg'\r\n            );\r\n            screenShots.push(screenShotURL);\r\n          });\r\n        }\r\n\r\n        searchResults = searchResults.concat([\r\n          {\r\n            id: game.id,\r\n            name: game.name,\r\n            summary: game.summary,\r\n            cover: coverImage,\r\n            gameConsole: req.params.console,\r\n            screenshots: screenShots,\r\n          }]);\r\n      }\r\n    });\r\n\r\n    res.json(JSON.stringify(searchResults));\r\n  }).catch((error) => {\r\n    throw error;\r\n  });\r\n});\r\n\r\nrouter.get('/getAllGames', (req, res) => {\r\n  let allGames = [];\r\n  User.find({}).lean()\r\n    .then((users) => {\r\n      users.forEach((user) => {\r\n        if (user.games) {\r\n          if (user.games[0].owner != req.session.user) {\r\n            allGames = allGames.concat(user.games);\r\n          }\r\n        }\r\n      });\r\n\r\n      res.json(allGames);\r\n    }).catch((err) => {\r\n      throw err;\r\n    });\r\n});\r\n\r\nrouter.get('/getUserGames', (req, res) => {\r\n  User.findOne({username: req.session.user}).lean()\r\n    .then((user) => {\r\n      if (user.games) {\r\n        res.json(user.games);\r\n      } else {\r\n        res.json([]);\r\n      }\r\n    });\r\n});\r\n\r\nrouter.post('/addGame', (req, res) => {\r\n  User.findOne({username: req.session.user}).lean()\r\n    .then((user) => {\r\n      const modifiedUser = Object.assign({}, user);\r\n\r\n      const gametoAdd = Array.from(req.body);\r\n      gametoAdd[0].owner = req.session.user; // append owner info to added game\r\n\r\n      const newGameColl = modifiedUser.games === null ? gametoAdd :\r\n        Array.from(modifiedUser.games).concat(gametoAdd);\r\n\r\n      User.findOneAndUpdate({username: req.session.user}, {games: newGameColl})\r\n        .then(() => {\r\n          res.json(req.body);\r\n        });\r\n    });\r\n});\r\n\r\nrouter.post('/removeGame', (req, res) => {\r\n  User.findOne({username: req.session.user}).lean()\r\n    .then((user) => {\r\n      const modifiedUser = Object.assign({}, user);\r\n\r\n      const newGameColl = Array.from(modifiedUser.games).filter((game) => {\r\n        if (req.body.id != game.id) {\r\n          return game;\r\n        }\r\n      });\r\n\r\n      User.findOneAndUpdate({username: req.session.user}, {games: newGameColl})\r\n        .then(() => {\r\n          res.json(newGameColl);\r\n        });\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}